# !/usr/bin/env python
# -*-coding:utf-8 -*-
"""
# @File       : 41_缺失的第一个正数.py
# @Time       ：2023/11/14 20:08
# @version    ：python 3.9
# @Software   : PyCharm
# @Description：
给你一个未排序的整数数组 nums ，请你找出其中没有出现的最小的正整数。
请你实现时间复杂度为 O(n) 并且只使用常数级别额外空间的解决方案。

示例 1：

输入：nums = [1,2,0]
输出：3
示例 2：

输入：nums = [3,4,-1,1]
输出：2
示例 3：

输入：nums = [7,8,9,11,12]
输出：1
"""


# ================【功能：】====================
class Solution:
    def firstMissingPositive(self, nums):
        i = 0
        while i >= 0:
            i += 1
            if i not in nums:
                break
        return i


s = Solution()  # 1 1 2 5 6 7 10
output = s.firstMissingPositive([100000,99999,99998,99997,99996,99995,99994,99993,99992,99991,99990,99989,99988,99987,99986,99985,99984,99983,99982,99981,99980,99979,99978,99977,99976,99975,99974,99973,99972,99971,99970,99969,99968,99967,99966,99965,99964,99963,99962,99961,99960,99959,99958,99957,99956,99955,99954,99953,99952,99951,99950,99949,99948,99947,99946,99945,99944,99943,99942,99941,99940,99939,99938,99937,99936,99935,99934,99933,99932,99931,99930,99929,99928,99927,99926,99925,99924,99923,99922,99921,99920,99919,99918,99917,99916,99915,99914,99913,99912,99911,99910,99909,99908,99907,99906,99905,99904,99903,99902,99901,99900,99899,99898,99897,99896,99895])
print(output)
